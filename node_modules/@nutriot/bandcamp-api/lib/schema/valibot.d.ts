import * as valibot from 'valibot';

/**
 * Authorization API
 * @see {@link https://bandcamp.com/developer}
 */
declare const clientCredentials: {
    requestBody: valibot.ObjectSchema<{
        grant_type: valibot.LiteralSchema<"client_credentials", "client_credentials">;
        client_id: valibot.NumberSchema<number>;
        client_secret: valibot.StringSchema<string>;
    }, undefined, {
        grant_type: "client_credentials";
        client_id: number;
        client_secret: string;
    }>;
    response: undefined;
};
declare const refreshToken: {
    requestBody: valibot.ObjectSchema<{
        refresh_token: valibot.StringSchema<string>;
        grant_type: valibot.LiteralSchema<"client_credentials", "client_credentials">;
        client_id: valibot.NumberSchema<number>;
        client_secret: valibot.StringSchema<string>;
    }, undefined, {
        grant_type: "client_credentials";
        client_id: number;
        client_secret: string;
        refresh_token: string;
    }>;
    response: undefined;
};
/**
 * Account API
 * @see {@link https://bandcamp.com/developer/account}
 */
declare const getMyBands: {
    requestBody: undefined;
    reponse: valibot.ObjectSchema<{
        bands: valibot.ArraySchema<valibot.ObjectSchema<{
            subdomain: valibot.StringSchema<string>;
            band_id: valibot.NumberSchema<number>;
            name: valibot.StringSchema<string>;
            member_bands: valibot.ObjectSchema<{
                subdomain: valibot.StringSchema<string>;
                band_id: valibot.NumberSchema<number>;
                name: valibot.StringSchema<string>;
            }, undefined, {
                subdomain: string;
                band_id: number;
                name: string;
            }>;
        }, undefined, {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands: {
                subdomain: string;
                band_id: number;
                name: string;
            };
        }>, {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands: {
                subdomain: string;
                band_id: number;
                name: string;
            };
        }[]>;
    }, undefined, {
        bands: {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands: {
                subdomain: string;
                band_id: number;
                name: string;
            };
        }[];
    }>;
};
/**
 * Sales API
 * @see {@link https://bandcamp.com/developer/sales}
 */
declare const salesReport: {
    requestBody: valibot.ObjectSchema<{
        format: valibot.OptionalSchema<valibot.PicklistSchema<["csv", "json"], "csv" | "json">, undefined, "csv" | "json" | undefined>;
        band_id: valibot.NumberSchema<number>;
        member_band_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        start_time: valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>;
        end_time: valibot.OptionalSchema<valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>, undefined, [Date, string] | undefined>;
    }, undefined, {
        band_id: number;
        start_time: [Date, string];
        format?: "csv" | "json" | undefined;
        member_band_id?: number | undefined;
        end_time?: [Date, string] | undefined;
    }>;
    response: valibot.TupleSchema<[valibot.RecordSchema<valibot.StringSchema<string>, valibot.ObjectSchema<{
        date: valibot.StringSchema<string>;
        paid_to: valibot.TupleSchema<[valibot.StringSchema<string>, valibot.StringSchema<string>], undefined, [string, string]>;
        item_type: valibot.TupleSchema<[valibot.LiteralSchema<"album", "album">, valibot.LiteralSchema<"package", "package">, valibot.LiteralSchema<"track", "track">], undefined, ["album", "package", "track"]>;
        item_name: valibot.StringSchema<string>;
        artist: valibot.StringSchema<string>;
        currency: valibot.UnionSchema<[valibot.LiteralSchema<"AUD", "AUD">, valibot.LiteralSchema<"CAD", "CAD">, valibot.LiteralSchema<"CHF", "CHF">, valibot.LiteralSchema<"CZK", "CZK">, valibot.LiteralSchema<"DKK", "DKK">, valibot.LiteralSchema<"EUR", "EUR">, valibot.LiteralSchema<"GBP", "GBP">, valibot.LiteralSchema<"HKD", "HKD">, valibot.LiteralSchema<"HUF", "HUF">, valibot.LiteralSchema<"ILS", "ILS">, valibot.LiteralSchema<"JPY", "JPY">, valibot.LiteralSchema<"MXN", "MXN">, valibot.LiteralSchema<"NOK", "NOK">, valibot.LiteralSchema<"NZD", "NZD">, valibot.LiteralSchema<"PLN", "PLN">, valibot.LiteralSchema<"SEK", "SEK">, valibot.LiteralSchema<"SGD", "SGD">, valibot.LiteralSchema<"USD", "USD">], "AUD" | "CAD" | "CHF" | "CZK" | "DKK" | "EUR" | "GBP" | "HKD" | "HUF" | "ILS" | "JPY" | "MXN" | "NOK" | "NZD" | "PLN" | "SEK" | "SGD" | "USD">;
        item_price: valibot.NumberSchema<number>;
        quantity: valibot.NumberSchema<number>;
        discount_code: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        sub_total: valibot.NumberSchema<number>;
        seller_tax: valibot.NumberSchema<number>;
        marketplace_tax: valibot.NumberSchema<number>;
        shipping: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.NumberSchema<number>], undefined, [null, number]>;
        ship_from_country_name: valibot.StringSchema<string>;
        transaction_fee: valibot.NumberSchema<number>;
        fee_type: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.LiteralSchema<"creditcard", "creditcard">, valibot.LiteralSchema<"paypal", "paypal">], undefined, [null, "creditcard", "paypal"]>;
        item_total: valibot.NumberSchema<number>;
        amount_you_received: valibot.NumberSchema<number>;
        bandcamp_transaction_id: valibot.NumberSchema<number>;
        paypal_transaction_id: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        net_amount: valibot.NumberSchema<number>;
        package: valibot.StringSchema<string>;
        option: valibot.NullSchema<null>;
        item_url: valibot.StringSchema<string>;
        catalog_number: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        upc: valibot.StringSchema<string>;
        isrc: valibot.StringSchema<string>;
        buyer_name: valibot.StringSchema<string>;
        buyer_email: valibot.StringSchema<string>;
        buyer_phone: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        buyer_note: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_to_name: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_to_street: valibot.StringSchema<string>;
        ship_to_street_2: valibot.StringSchema<string>;
        ship_to_city: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_to_state: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_to_zip: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_to_country: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_to_country_code: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        ship_date: valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>;
        ship_notes: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        country: valibot.StringSchema<string>;
        country_code: valibot.StringSchema<string>;
        region_or_state: valibot.StringSchema<string>;
        city: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
        referer: valibot.StringSchema<string>;
        referer_url: valibot.StringSchema<string>;
        sku: valibot.TupleSchema<[valibot.NullSchema<null>, valibot.StringSchema<string>], undefined, [null, string]>;
    }, undefined, {
        date: string;
        paid_to: [string, string];
        item_type: ["album", "package", "track"];
        package: string;
        item_name: string;
        artist: string;
        currency: "AUD" | "CAD" | "CHF" | "CZK" | "DKK" | "EUR" | "GBP" | "HKD" | "HUF" | "ILS" | "JPY" | "MXN" | "NOK" | "NZD" | "PLN" | "SEK" | "SGD" | "USD";
        item_price: number;
        quantity: number;
        discount_code: [null, string];
        sub_total: number;
        seller_tax: number;
        marketplace_tax: number;
        shipping: [null, number];
        ship_from_country_name: string;
        transaction_fee: number;
        fee_type: [null, "creditcard", "paypal"];
        item_total: number;
        amount_you_received: number;
        bandcamp_transaction_id: number;
        paypal_transaction_id: [null, string];
        net_amount: number;
        option: null;
        item_url: string;
        catalog_number: [null, string];
        upc: string;
        isrc: string;
        buyer_name: string;
        buyer_email: string;
        buyer_phone: [null, string];
        buyer_note: [null, string];
        ship_to_name: [null, string];
        ship_to_street: string;
        ship_to_street_2: string;
        ship_to_city: [null, string];
        ship_to_state: [null, string];
        ship_to_zip: [null, string];
        ship_to_country: [null, string];
        ship_to_country_code: [null, string];
        ship_date: [Date, string];
        ship_notes: [null, string];
        country: string;
        country_code: string;
        region_or_state: string;
        city: [null, string];
        referer: string;
        referer_url: string;
        sku: [null, string];
    }>, {
        [x: string]: {
            date: string;
            paid_to: [string, string];
            item_type: ["album", "package", "track"];
            package: string;
            item_name: string;
            artist: string;
            currency: "AUD" | "CAD" | "CHF" | "CZK" | "DKK" | "EUR" | "GBP" | "HKD" | "HUF" | "ILS" | "JPY" | "MXN" | "NOK" | "NZD" | "PLN" | "SEK" | "SGD" | "USD";
            item_price: number;
            quantity: number;
            discount_code: [null, string];
            sub_total: number;
            seller_tax: number;
            marketplace_tax: number;
            shipping: [null, number];
            ship_from_country_name: string;
            transaction_fee: number;
            fee_type: [null, "creditcard", "paypal"];
            item_total: number;
            amount_you_received: number;
            bandcamp_transaction_id: number;
            paypal_transaction_id: [null, string];
            net_amount: number;
            option: null;
            item_url: string;
            catalog_number: [null, string];
            upc: string;
            isrc: string;
            buyer_name: string;
            buyer_email: string;
            buyer_phone: [null, string];
            buyer_note: [null, string];
            ship_to_name: [null, string];
            ship_to_street: string;
            ship_to_street_2: string;
            ship_to_city: [null, string];
            ship_to_state: [null, string];
            ship_to_zip: [null, string];
            ship_to_country: [null, string];
            ship_to_country_code: [null, string];
            ship_date: [Date, string];
            ship_notes: [null, string];
            country: string;
            country_code: string;
            region_or_state: string;
            city: [null, string];
            referer: string;
            referer_url: string;
            sku: [null, string];
        };
    }>, valibot.ObjectSchema<{
        csv: valibot.StringSchema<string>;
    }, undefined, {
        csv: string;
    }>], undefined, [{
        [x: string]: {
            date: string;
            paid_to: [string, string];
            item_type: ["album", "package", "track"];
            package: string;
            item_name: string;
            artist: string;
            currency: "AUD" | "CAD" | "CHF" | "CZK" | "DKK" | "EUR" | "GBP" | "HKD" | "HUF" | "ILS" | "JPY" | "MXN" | "NOK" | "NZD" | "PLN" | "SEK" | "SGD" | "USD";
            item_price: number;
            quantity: number;
            discount_code: [null, string];
            sub_total: number;
            seller_tax: number;
            marketplace_tax: number;
            shipping: [null, number];
            ship_from_country_name: string;
            transaction_fee: number;
            fee_type: [null, "creditcard", "paypal"];
            item_total: number;
            amount_you_received: number;
            bandcamp_transaction_id: number;
            paypal_transaction_id: [null, string];
            net_amount: number;
            option: null;
            item_url: string;
            catalog_number: [null, string];
            upc: string;
            isrc: string;
            buyer_name: string;
            buyer_email: string;
            buyer_phone: [null, string];
            buyer_note: [null, string];
            ship_to_name: [null, string];
            ship_to_street: string;
            ship_to_street_2: string;
            ship_to_city: [null, string];
            ship_to_state: [null, string];
            ship_to_zip: [null, string];
            ship_to_country: [null, string];
            ship_to_country_code: [null, string];
            ship_date: [Date, string];
            ship_notes: [null, string];
            country: string;
            country_code: string;
            region_or_state: string;
            city: [null, string];
            referer: string;
            referer_url: string;
            sku: [null, string];
        };
    }, {
        csv: string;
    }]>;
};
/**
 * Merchant API
 * @see {@link https://bandcamp.com/developer/merch}
 */
declare const getMerchDetails: {
    requestBody: valibot.ObjectSchema<{
        package_ids: valibot.ArraySchema<valibot.NumberSchema<number>, number[]>;
        band_id: valibot.NumberSchema<number>;
        member_band_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        start_time: valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>;
        end_time: valibot.OptionalSchema<valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>, undefined, [Date, string] | undefined>;
    }, undefined, {
        band_id: number;
        start_time: [Date, string];
        package_ids: number[];
        member_band_id?: number | undefined;
        end_time?: [Date, string] | undefined;
    }>;
    response: undefined;
};
declare const getShippingOrigin: {
    requestBody: valibot.ObjectSchema<{
        band_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        origin_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
    }, undefined, {
        band_id?: number | undefined;
        origin_id?: number | undefined;
    }>;
    response: undefined;
};
declare const getOrders: {
    requestBody: valibot.ObjectSchema<{
        band_id: valibot.NumberSchema<number>;
        member_band_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        start_time: valibot.OptionalSchema<valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>, undefined, [Date, string] | undefined>;
        end_time: valibot.OptionalSchema<valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>, undefined, [Date, string] | undefined>;
        unshipped_only: valibot.OptionalSchema<valibot.BooleanSchema<boolean>, undefined, boolean | undefined>;
        name: valibot.OptionalSchema<valibot.StringSchema<string>, undefined, string | undefined>;
        origin_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        format: valibot.OptionalSchema<valibot.PicklistSchema<["csv", "json"], "csv" | "json">, undefined, "csv" | "json" | undefined>;
    }, undefined, {
        band_id: number;
        name?: string | undefined;
        format?: "csv" | "json" | undefined;
        member_band_id?: number | undefined;
        start_time?: [Date, string] | undefined;
        end_time?: [Date, string] | undefined;
        origin_id?: number | undefined;
        unshipped_only?: boolean | undefined;
    }>;
    response: undefined;
};
declare const updateShippedItems: {
    requestBody: valibot.ArraySchema<valibot.ObjectSchema<{
        id: valibot.NumberSchema<number>;
        id_type: valibot.PicklistSchema<["p", "s"], "p" | "s">;
        shipped: valibot.OptionalSchema<valibot.BooleanSchema<boolean>, undefined, boolean | undefined>;
        notification: valibot.OptionalSchema<valibot.BooleanSchema<boolean>, undefined, boolean | undefined>;
        notification_message: valibot.OptionalSchema<valibot.StringSchema<string>, undefined, string | undefined>;
        ship_date: valibot.OptionalSchema<valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>, undefined, [Date, string] | undefined>;
        carrier: valibot.OptionalSchema<valibot.StringSchema<string>, undefined, string | undefined>;
        tracking_code: valibot.OptionalSchema<valibot.TupleSchema<[valibot.NumberSchema<number>, valibot.StringSchema<string>], undefined, [number, string]>, undefined, [number, string] | undefined>;
    }, undefined, {
        id: number;
        id_type: "p" | "s";
        ship_date?: [Date, string] | undefined;
        shipped?: boolean | undefined;
        notification?: boolean | undefined;
        notification_message?: string | undefined;
        carrier?: string | undefined;
        tracking_code?: [number, string] | undefined;
    }>, {
        id: number;
        id_type: "p" | "s";
        ship_date?: [Date, string] | undefined;
        shipped?: boolean | undefined;
        notification?: boolean | undefined;
        notification_message?: string | undefined;
        carrier?: string | undefined;
        tracking_code?: [number, string] | undefined;
    }[]>;
    response: undefined;
};
declare const markDateRangeAsShipped: {
    requestBody: valibot.ObjectSchema<{
        band_id: valibot.NumberSchema<number>;
        member_band_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        start_time: valibot.OptionalSchema<valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>, undefined, [Date, string] | undefined>;
        end_time: valibot.TupleSchema<[valibot.DateSchema<Date>, valibot.StringSchema<string>], undefined, [Date, string]>;
        origin_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
        email_notifications: valibot.OptionalSchema<valibot.BooleanSchema<boolean>, undefined, boolean | undefined>;
    }, undefined, {
        band_id: number;
        end_time: [Date, string];
        member_band_id?: number | undefined;
        start_time?: [Date, string] | undefined;
        origin_id?: number | undefined;
        email_notifications?: boolean | undefined;
    }>;
    response: undefined;
};
declare const updateQuantities: {
    requestBody: valibot.ArraySchema<valibot.ObjectSchema<{
        id: valibot.NumberSchema<number>;
        id_type: valibot.PicklistSchema<["o", "p"], "o" | "p">;
        quantity_sold: valibot.NumberSchema<number>;
        quantity_available: valibot.NumberSchema<number>;
        origin_id: valibot.OptionalSchema<valibot.NumberSchema<number>, undefined, number | undefined>;
    }, undefined, {
        id: number;
        id_type: "o" | "p";
        quantity_sold: number;
        quantity_available: number;
        origin_id?: number | undefined;
    }>, {
        id: number;
        id_type: "o" | "p";
        quantity_sold: number;
        quantity_available: number;
        origin_id?: number | undefined;
    }[]>;
    response: undefined;
};
declare const updateSku: {
    requestBody: valibot.ArraySchema<valibot.ObjectSchema<{
        id: valibot.NumberSchema<number>;
        id_type: valibot.PicklistSchema<["o", "p"], "o" | "p">;
        sku: valibot.StringSchema<string>;
    }, undefined, {
        sku: string;
        id: number;
        id_type: "o" | "p";
    }>, {
        sku: string;
        id: number;
        id_type: "o" | "p";
    }[]>;
    response: undefined;
};

export { clientCredentials, getMerchDetails, getMyBands, getOrders, getShippingOrigin, markDateRangeAsShipped, refreshToken, salesReport, updateQuantities, updateShippedItems, updateSku };

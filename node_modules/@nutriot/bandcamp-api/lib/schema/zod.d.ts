import { z } from 'zod';

/**
 * Authorization API
 * @see {@link https://bandcamp.com/developer}
 */
declare const clientCredentials: {
    requestBody: z.ZodObject<{
        grant_type: z.ZodLiteral<"client_credentials">;
        client_id: z.ZodNumber;
        client_secret: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        grant_type: "client_credentials";
        client_id: number;
        client_secret: string;
    }, {
        grant_type: "client_credentials";
        client_id: number;
        client_secret: string;
    }>;
    response: undefined;
};
declare const refreshToken: {
    requestBody: z.ZodObject<{
        refresh_token: z.ZodString;
        grant_type: z.ZodLiteral<"client_credentials">;
        client_id: z.ZodNumber;
        client_secret: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        grant_type: "client_credentials";
        client_id: number;
        client_secret: string;
        refresh_token: string;
    }, {
        grant_type: "client_credentials";
        client_id: number;
        client_secret: string;
        refresh_token: string;
    }>;
    response: undefined;
};
/**
 * Account API
 * @see {@link https://bandcamp.com/developer/account}
 */
declare const getMyBands: {
    requestBody: undefined;
    reponse: z.ZodObject<{
        bands: z.ZodArray<z.ZodObject<{
            subdomain: z.ZodString;
            band_id: z.ZodNumber;
            name: z.ZodString;
            member_bands: z.ZodOptional<z.ZodObject<{
                subdomain: z.ZodString;
                band_id: z.ZodNumber;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                subdomain: string;
                band_id: number;
                name: string;
            }, {
                subdomain: string;
                band_id: number;
                name: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands?: {
                subdomain: string;
                band_id: number;
                name: string;
            } | undefined;
        }, {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands?: {
                subdomain: string;
                band_id: number;
                name: string;
            } | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        bands: {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands?: {
                subdomain: string;
                band_id: number;
                name: string;
            } | undefined;
        }[];
    }, {
        bands: {
            subdomain: string;
            band_id: number;
            name: string;
            member_bands?: {
                subdomain: string;
                band_id: number;
                name: string;
            } | undefined;
        }[];
    }>;
};
/**
 * Sales API
 * @see {@link https://bandcamp.com/developer/sales}
 */
declare const salesReport: {
    requestBody: z.ZodObject<{
        format: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"csv">, z.ZodLiteral<"json">]>>;
        band_id: z.ZodNumber;
        member_band_id: z.ZodOptional<z.ZodNumber>;
        start_time: z.ZodTuple<[z.ZodDate, z.ZodString], null>;
        end_time: z.ZodOptional<z.ZodTuple<[z.ZodDate, z.ZodString], null>>;
    }, "strip", z.ZodTypeAny, {
        band_id: number;
        start_time: [Date, string];
        format?: "csv" | "json" | undefined;
        member_band_id?: number | undefined;
        end_time?: [Date, string] | undefined;
    }, {
        band_id: number;
        start_time: [Date, string];
        format?: "csv" | "json" | undefined;
        member_band_id?: number | undefined;
        end_time?: [Date, string] | undefined;
    }>;
    response: z.ZodTuple<[z.ZodRecord<z.ZodString, z.ZodObject<{
        date: z.ZodEffects<z.ZodDate, Date, unknown>;
        paid_to: z.ZodTuple<[z.ZodString, z.ZodString], null>;
        item_type: z.ZodTuple<[z.ZodLiteral<"album">, z.ZodLiteral<"package">, z.ZodLiteral<"track">], null>;
        item_name: z.ZodString;
        artist: z.ZodString;
        currency: z.ZodUnion<[z.ZodLiteral<"AUD">, z.ZodLiteral<"CAD">, z.ZodLiteral<"CHF">, z.ZodLiteral<"CZK">, z.ZodLiteral<"DKK">, z.ZodLiteral<"EUR">, z.ZodLiteral<"GBP">, z.ZodLiteral<"HKD">, z.ZodLiteral<"HUF">, z.ZodLiteral<"ILS">, z.ZodLiteral<"JPY">, z.ZodLiteral<"MXN">, z.ZodLiteral<"NOK">, z.ZodLiteral<"NZD">, z.ZodLiteral<"PLN">, z.ZodLiteral<"SEK">, z.ZodLiteral<"SGD">, z.ZodLiteral<"USD">]>;
        item_price: z.ZodNumber;
        quantity: z.ZodNumber;
        discount_code: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        sub_total: z.ZodNumber;
        seller_tax: z.ZodNumber;
        marketplace_tax: z.ZodNumber;
        shipping: z.ZodTuple<[z.ZodNull, z.ZodNumber], null>;
        ship_from_country_name: z.ZodString;
        transaction_fee: z.ZodNumber;
        fee_type: z.ZodTuple<[z.ZodNull, z.ZodLiteral<"creditcard">, z.ZodLiteral<"paypal">], null>;
        item_total: z.ZodNumber;
        amount_you_received: z.ZodNumber;
        bandcamp_transaction_id: z.ZodNumber;
        paypal_transaction_id: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        net_amount: z.ZodNumber;
        package: z.ZodString;
        option: z.ZodNull;
        item_url: z.ZodString;
        catalog_number: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        upc: z.ZodString;
        isrc: z.ZodString;
        buyer_name: z.ZodString;
        buyer_email: z.ZodString;
        buyer_phone: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        buyer_note: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_to_name: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_to_street: z.ZodString;
        ship_to_street_2: z.ZodString;
        ship_to_city: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_to_state: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_to_zip: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_to_country: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_to_country_code: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        ship_date: z.ZodTuple<[z.ZodDate, z.ZodString], null>;
        ship_notes: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        country: z.ZodString;
        country_code: z.ZodString;
        region_or_state: z.ZodString;
        city: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
        referer: z.ZodString;
        referer_url: z.ZodTuple<[z.ZodNull, z.ZodEffects<z.ZodString, string, string>], null>;
        sku: z.ZodTuple<[z.ZodNull, z.ZodString], null>;
    }, "strip", z.ZodTypeAny, {
        date: Date;
        paid_to: [string, string];
        item_type: ["album", "package", "track"];
        package: string;
        item_name: string;
        artist: string;
        currency: "AUD" | "CAD" | "CHF" | "CZK" | "DKK" | "EUR" | "GBP" | "HKD" | "HUF" | "ILS" | "JPY" | "MXN" | "NOK" | "NZD" | "PLN" | "SEK" | "SGD" | "USD";
        item_price: number;
        quantity: number;
        discount_code: [null, string];
        sub_total: number;
        seller_tax: number;
        marketplace_tax: number;
        shipping: [null, number];
        ship_from_country_name: string;
        transaction_fee: number;
        fee_type: [null, "creditcard", "paypal"];
        item_total: number;
        amount_you_received: number;
        bandcamp_transaction_id: number;
        paypal_transaction_id: [null, string];
        net_amount: number;
        option: null;
        item_url: string;
        catalog_number: [null, string];
        upc: string;
        isrc: string;
        buyer_name: string;
        buyer_email: string;
        buyer_phone: [null, string];
        buyer_note: [null, string];
        ship_to_name: [null, string];
        ship_to_street: string;
        ship_to_street_2: string;
        ship_to_city: [null, string];
        ship_to_state: [null, string];
        ship_to_zip: [null, string];
        ship_to_country: [null, string];
        ship_to_country_code: [null, string];
        ship_date: [Date, string];
        ship_notes: [null, string];
        country: string;
        country_code: string;
        region_or_state: string;
        city: [null, string];
        referer: string;
        referer_url: [null, string];
        sku: [null, string];
    }, {
        paid_to: [string, string];
        item_type: ["album", "package", "track"];
        package: string;
        item_name: string;
        artist: string;
        currency: "AUD" | "CAD" | "CHF" | "CZK" | "DKK" | "EUR" | "GBP" | "HKD" | "HUF" | "ILS" | "JPY" | "MXN" | "NOK" | "NZD" | "PLN" | "SEK" | "SGD" | "USD";
        item_price: number;
        quantity: number;
        discount_code: [null, string];
        sub_total: number;
        seller_tax: number;
        marketplace_tax: number;
        shipping: [null, number];
        ship_from_country_name: string;
        transaction_fee: number;
        fee_type: [null, "creditcard", "paypal"];
        item_total: number;
        amount_you_received: number;
        bandcamp_transaction_id: number;
        paypal_transaction_id: [null, string];
        net_amount: number;
        option: null;
        item_url: string;
        catalog_number: [null, string];
        upc: string;
        isrc: string;
        buyer_name: string;
        buyer_email: string;
        buyer_phone: [null, string];
        buyer_note: [null, string];
        ship_to_name: [null, string];
        ship_to_street: string;
        ship_to_street_2: string;
        ship_to_city: [null, string];
        ship_to_state: [null, string];
        ship_to_zip: [null, string];
        ship_to_country: [null, string];
        ship_to_country_code: [null, string];
        ship_date: [Date, string];
        ship_notes: [null, string];
        country: string;
        country_code: string;
        region_or_state: string;
        city: [null, string];
        referer: string;
        referer_url: [null, string];
        sku: [null, string];
        date?: unknown;
    }>>, z.ZodObject<{
        csv: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        csv: string;
    }, {
        csv: string;
    }>], null>;
};
/**
 * Merchant API
 * @see {@link https://bandcamp.com/developer/merch}
 */
declare const getMerchDetails: {
    requestBody: z.ZodObject<{
        package_ids: z.ZodArray<z.ZodNumber, "many">;
        band_id: z.ZodNumber;
        member_band_id: z.ZodOptional<z.ZodNumber>;
        start_time: z.ZodTuple<[z.ZodDate, z.ZodString], null>;
        end_time: z.ZodOptional<z.ZodTuple<[z.ZodDate, z.ZodString], null>>;
    }, "strip", z.ZodTypeAny, {
        band_id: number;
        start_time: [Date, string];
        package_ids: number[];
        member_band_id?: number | undefined;
        end_time?: [Date, string] | undefined;
    }, {
        band_id: number;
        start_time: [Date, string];
        package_ids: number[];
        member_band_id?: number | undefined;
        end_time?: [Date, string] | undefined;
    }>;
    response: undefined;
};
declare const getShippingOrigin: {
    requestBody: z.ZodObject<{
        band_id: z.ZodOptional<z.ZodNumber>;
        origin_id: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        band_id?: number | undefined;
        origin_id?: number | undefined;
    }, {
        band_id?: number | undefined;
        origin_id?: number | undefined;
    }>;
    response: undefined;
};
declare const getOrders: {
    requestBody: z.ZodObject<{
        band_id: z.ZodNumber;
        member_band_id: z.ZodOptional<z.ZodNumber>;
        start_time: z.ZodOptional<z.ZodTuple<[z.ZodDate, z.ZodString], null>>;
        end_time: z.ZodOptional<z.ZodTuple<[z.ZodDate, z.ZodString], null>>;
        unshipped_only: z.ZodOptional<z.ZodBoolean>;
        name: z.ZodOptional<z.ZodString>;
        origin_id: z.ZodOptional<z.ZodNumber>;
        format: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"csv">, z.ZodLiteral<"json">]>>;
    }, "strip", z.ZodTypeAny, {
        band_id: number;
        member_band_id?: number | undefined;
        start_time?: [Date, string] | undefined;
        end_time?: [Date, string] | undefined;
        unshipped_only?: boolean | undefined;
        name?: string | undefined;
        origin_id?: number | undefined;
        format?: "csv" | "json" | undefined;
    }, {
        band_id: number;
        member_band_id?: number | undefined;
        start_time?: [Date, string] | undefined;
        end_time?: [Date, string] | undefined;
        unshipped_only?: boolean | undefined;
        name?: string | undefined;
        origin_id?: number | undefined;
        format?: "csv" | "json" | undefined;
    }>;
    response: undefined;
};
declare const updateShippedItems: {
    requestBody: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        id_type: z.ZodUnion<[z.ZodLiteral<"p">, z.ZodLiteral<"s">]>;
        shipped: z.ZodOptional<z.ZodBoolean>;
        notification: z.ZodOptional<z.ZodBoolean>;
        notification_message: z.ZodOptional<z.ZodString>;
        ship_date: z.ZodOptional<z.ZodTuple<[z.ZodDate, z.ZodString], null>>;
        carrier: z.ZodOptional<z.ZodString>;
        tracking_code: z.ZodOptional<z.ZodTuple<[z.ZodNumber, z.ZodString], null>>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        id_type: "p" | "s";
        shipped?: boolean | undefined;
        notification?: boolean | undefined;
        notification_message?: string | undefined;
        ship_date?: [Date, string] | undefined;
        carrier?: string | undefined;
        tracking_code?: [number, string] | undefined;
    }, {
        id: number;
        id_type: "p" | "s";
        shipped?: boolean | undefined;
        notification?: boolean | undefined;
        notification_message?: string | undefined;
        ship_date?: [Date, string] | undefined;
        carrier?: string | undefined;
        tracking_code?: [number, string] | undefined;
    }>, "many">;
    response: undefined;
};
declare const markDateRangeAsShipped: {
    requestBody: z.ZodObject<{
        band_id: z.ZodNumber;
        member_band_id: z.ZodOptional<z.ZodNumber>;
        start_time: z.ZodOptional<z.ZodTuple<[z.ZodDate, z.ZodString], null>>;
        end_time: z.ZodTuple<[z.ZodDate, z.ZodString], null>;
        origin_id: z.ZodOptional<z.ZodNumber>;
        email_notifications: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        band_id: number;
        end_time: [Date, string];
        member_band_id?: number | undefined;
        start_time?: [Date, string] | undefined;
        origin_id?: number | undefined;
        email_notifications?: boolean | undefined;
    }, {
        band_id: number;
        end_time: [Date, string];
        member_band_id?: number | undefined;
        start_time?: [Date, string] | undefined;
        origin_id?: number | undefined;
        email_notifications?: boolean | undefined;
    }>;
    response: undefined;
};
declare const updateQuantities: {
    requestBody: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        id_type: z.ZodUnion<[z.ZodLiteral<"o">, z.ZodLiteral<"p">]>;
        quantity_sold: z.ZodNumber;
        quantity_available: z.ZodNumber;
        origin_id: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        id_type: "o" | "p";
        quantity_sold: number;
        quantity_available: number;
        origin_id?: number | undefined;
    }, {
        id: number;
        id_type: "o" | "p";
        quantity_sold: number;
        quantity_available: number;
        origin_id?: number | undefined;
    }>, "many">;
    response: undefined;
};
declare const updateSku: {
    requestBody: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        id_type: z.ZodUnion<[z.ZodLiteral<"o">, z.ZodLiteral<"p">]>;
        sku: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sku: string;
        id: number;
        id_type: "o" | "p";
    }, {
        sku: string;
        id: number;
        id_type: "o" | "p";
    }>, "many">;
    response: undefined;
};

export { clientCredentials, getMerchDetails, getMyBands, getOrders, getShippingOrigin, markDateRangeAsShipped, refreshToken, salesReport, updateQuantities, updateShippedItems, updateSku };
